#+title: Neo Vim Configuration

* Context

  After using spacemacs for a year, then doom emacs for 2+ years, I find myself
  a little frustrated with emacs. Conceptually I really like it, but to go from
  80% of what I want to that 100% lies a arduous journey learning all the inner
  workings. This config is me taking a break to setup a standard pretty-solid
  editor experience for myself, where I spend the time to read docs and learn
  the APIs.

  When this config is stable, I'll probably switch back to emacs and start over 
  to better learn its inner workings without sacrificing productivity by relying
  on this config for my day-to-day work. From then on, I can hopefully jump
  between neovim and emacs as I please.

** Why Neovim?

   I've used VS Code off-and-on for a few years now, occasionally hopping back
   into it for TypeScript specific needs. That said, it has so much I'd like to
   change but is not really possible. Additionally, I'd rather just have a
   programming language to customize it with than every plugin author
   implementing conditionals in some constrained JSON syntax. Using emacs taught
   me the value of being able to really express what you want out of an editor.

   Neovim feels like a solid middleground between providing a high level of
   customization leveraging languages like lua (or in my case fennel) which I'm
   already familiar with. It's also been exploding with cool plugins and
   enhancements in the past few years and I am impressed with the momentum it
   has.

** Fennel

   The majority of customization will be done with the
   [[https://fennel-lang.org/][Fennel]] lisp compiled at runtime to lua. There
   is a startup performance penalty but I don't anticipate closing and reopening
   neovim that often. With embedding the runtime, I have the opportunity to
   setup a REPL environment so I can evaluate fennel as I write it to customize
   my neovim editor. This feels much more productive to me than restarting,
   sourcing, or relying on a reloading plugin since I can try out ideas
   line-by-line or var by var without even having to save a file. I am a huge
   fan of Clojure and other lisp languages so working with fennel feels great to
   me and combined with a parinfer, paredit, and similar structural editing
   plugins the code can sometimes feel like it writes itself.

* Todos

  - [x] Setup vim-sexp bindings
  - [x] Configure LSP (at least for clojure/clojurescript)
  - [x] Try out a completion engine like coc, ctrl-x mode, nvim-cmp, ddc (nvim-cmp)
  - [-] Setup clj-kondo + maybe Ale? (clojure-lsp might already do this)
  - [ ] Try [[https://github.com/shadmansaleh/IRC.nvim]]
  - [ ] Try [[https://github.com/rohit-px2/nvui]]
  - [x] Upstream pr for conjure to generalize comment-form?
  - [x] Upstream pr for aniseed to update fennel
    [[https://libera.ems.host/_matrix/media/r0/download/matrix.org/gPKSgUSyRobtvtAMRnITvJjm/Screen%20Shot%202022-09-17%20at%207.49.26%20am.png]]
  - [-] Install [https://github.com/rmagatti/auto-session][auto-session]] and
    [[https://github.com/rmagatti/session-lens][session-lens]]
    [ ] Install [[https://github.com/jose-elias-alvarez/nvim-lsp-ts-utils]]
  - [x] Install vim-surround or updated equivalent with cs, ds, ys bindings
  - [x] Install a formatter library(null-lsp might do this)?
  - [x] Install [[https://github.com/TimUntersberger/neogit][neogit]]
  - [x] Install Octo
  - [ ] Update file_browser and find_files to use even smarter tab function
  - [x] Install comment library
  - [x] Install [[mason][https://github.com/williamboman/mason.nvim]]
  - [x] Bind <C-c><C-c> to neogit commit in neogit commit buffer
  - [x] Update Conjure log bindings to use - and |
  - [x] Bind <leader>w{hjkl} movements using tmux navigation
  - [ ] Configure terminal settings
  - [ ] Find a plugin for common file operations like renaming, moving, deleting
  - [x] Research hard wrapping settings or plugins
  - [x] Move lsp bindings to permanent bindings
  - [x] --Install-- write a statusline
  - [ ] Deprioritize spelling completions
  - [x] Fix signature UI
  - [ ] Create diagnostics shortcut
  - [ ] Research telescope file browser impl
  - [X] Try himalaya

* References

  - [[https://github.com/nvim-neorg/neorg/wikcompatabilityi/Tangling]]
  - [[https://practical.li/neovim/install/packages/]]
  - [[https://alpha2phi.medium.com/new-neovim-plugins-you-should-try-18aac675f595]]
  - [[https://grem1.in/post/nvim-en/]]

* Questions

** How to put the output of a command into a buffer?

   Use the Bufferize plugin [[https://github.com/AndrewRadev/bufferize.vim]]

   #+begin_src vim
   :vert Bufferize nmap
   #+end_src

*** How does bufferize work?

    Mostly seems to use redirect and `silent exe`

    #+begin_src vim
    " Execute the command and get its output
    let cmd = a:cmd
    redir => output
    silent exe cmd
    redir END
    #+end_src

** Can help buffers be opened in a full split pane?

   This at least opens it in a vertical pane
   #+begin_src vim
   :vert help vim-sexp
   #+end_src

** How do I see the syntax hl groups under cursor?

   Source from [[https://neovim.discourse.group/t/synstack-equivalent-for-extmarks-based-highlighting/1373]]

   #+begin_src vim
   let l:syn_ids = synstack(row('.'), col('.'))
   let l:syn_names = map(syn_ids, {i,s -> hlIDattr(s, 'name')})
   #+end_src

** How do I tangle with nvim-orgmode?

   - [[https://github.com/OrgTangle/org-babel-tangle.py/blob/master/org-babel-tangle]]
   - [[https://github.com/nvim-orgmode/orgmode/discussions/275]]

   - UPDATE [2023/02/19]: Built a fennel plugin that can tangle org files.

* Issues

** project.nvim is not picking up the correct project root :fixed:work-around:

   Given:

   - In one tab is views.cljs in a Clojure project
   - Another tab is ~/.config/nvim/fnl/config/core.fnl
   - project.nvim is installed which automatically sets the cd to the project root

   Expected:

   - When editing config/core.fnl and using something like ~:Telescope git_files~
     to search project files, I expect it to be searching project containing
     core.fnl (dotfiles)
   - Running =:pwd= returns the root project containing  =config/core.fnl=

   Actual:

   - Trying to search project files near my dotfiles only prompts for searching
     the clojure project in the other tab.
   - =:pwd= returns the root of the clojure project instead of the root of the
     file I'm working on
   - Using neogit also uses the project path instead of the dofiles project

   What have I tried?:

   - Tried logging ~lua.lsp.buf_get_clients()~. What is returned is:

   #+begin_src fennel
   [{:name "null-ls" :root "/Users/j/projects/crunchy-price-calc"}]
   #+end_src

   - This suggests null-ls is reusing the client and pointing to the project 
     root instead of current file root.

   - Have not seen topics on this in null-ls gh issues and docs, #neovim irc,
     or neovim discourse. 

   - Looked at some `:help lsp` docs but nothing jumped out as the cause

   - Looked up the code for how project.nvim picks the root, it mostly calls
     out to lsp and falls back to pattern matching

   Workaround:

   - Can configure project.nvim to ignore certain lsp clients, so added null-ls
     for now

   - Created a discussion question [[https://github.com/jose-elias-alvarez/null-ls.nvim/discussions/1120]]

** vim-cmp completes too eagerly

   When typing text, spelling corrections can come up automatically. The 
   problem is if I'm trying to insert a line break after pressing backspace,
   it applies the correction.

   Try updating vim-cmp to use explicit confirm.

   Results:

   - [x] Editing the settings for the <cr> binding seems to have worked! But now
     I may need to fix some settings to explicitly select. 
   - [x] Use TAB for selecting completions


** Not entirely sure vim-cmp is setup correctly :fixed:

   While I do seem to get spelling suggestions from null-ls, not sure if I'm
   getting codespell suggestions, or even lsp suggestions in say a clojure 
   project buffer.

** Theming hover? :fixed:

   Got vim.lsp.buf.hover to work, but the UI is kinda ugly, and I don't like 
   that it takes up the full width. Would be nice to make it look better with 
   config or a UI package.

   I've tried hover.nvim but that was throwing an error 
   [[https://github.com/lewis6991/hover.nvim/issues/2]]

   Thinking it might be better to try configuring the native hover UI or copying
   some config from hover.nvim.

   Results:

   - Found the APIs to customize the sizing of the hover float window
   - [ ] Parse markdown links better or pr for [[https://github.com/neovim/neovim/issues/20246]]
   - Installed Lspsaga which also has a nice hover ui

** Don't like Telescope file_browser UX

   The Telescope file_browser is really nice, but I don't like using it as much 
   as doom emacs' find file.

   Thinking it would be cool to make a fork or alternative that uses Telescope 
   to display the current buffer path, supports tab completion and lists the files 
   adjacent to current file.

   Defaults to cwd of current buffer

** Command Palette only displays user commands

   Would like it if the command palette allowed me to search all commands
   instead of just custom modes. Maybe dressing with an enhanced command mode
   would do the trick?

** Improving typescript experience

   - Every possible formatter is listed in my feline statusline
   - Does not appear to be formatting on save
   - Running formatter manually results in changed whitespace, possibly not 
     using prettier.
   - [x] Display hover hint automatically
   - [x] Display type hint for item under cursor with `C-Space`
   - [ ] Prioritize lsp completions above spelling ones

** Codespell code actions and word lists :fixed:

   It would be helpful to enhance the codespell null-lsp functionality to provide
   code actions to make corrections.

   Additionally actions to add words to dictionary would be good for reducing errors

   Lastly, it would be great if it could be modified in userland to pull words 
   from a project's vscode settings without having to change the null-ls builtin.

   UPDATE [2023-02-19]: A contributor kindly updated null-ls to include cspell
   code actions.



* Bootstrapping Fennel
  :properties:
  :header-args:fennel: :tangle ./fnl/bootstrap.fnl
  :end:

  Build init.lua

  #+begin_src shell
  make
  #+end_src


  #+begin_src fennel
  ;; DO NOT EDIT THIS FILE
  ;; Generated from ../neovim.norg
  #+end_src

  #+begin_src fennel
  (local configdir (vim.fn.stdpath "config"))
  #+end_src

  Update runtime paths to leverage the ~/.config/nvim/{fnl,lua} dirs
  This lets me organize my config by filetype, which we can then use
  to load the fennel library.

  #+begin_src fennel
  (let [custompaths [(.. configdir "/fnl")
                     (.. configdir "/lua")]
        customrtp (table.concat custompaths ",")]
    (vim.opt.runtimepath:prepend (.. customrtp ",")))
  #+end_src

  Load the fennel library which we need to access some exports to setup
  the searcher and update the fennel path property so that fnl files
  can be imported with the same conventions as lua files.

  #+begin_src fennel
  (global fennel (require :config.fennel))
  #+end_src

  Update fennel.path to load =*.fnl= files and =/*/init.fnl= files like lua does
  so I can use lines like ~(local {: some-fn} (require :config.somelib))~

  #+begin_src fennel
  (let [fnldir (.. configdir "/fnl")]
    (each [_ dir (ipairs ["/?.fnl" "/?/init.fnl"])]
     (tset fennel :path (.. fnldir dir ";" fennel.path))
     (tset fennel :macro-path (.. fnldir dir ";" fennel.macro-path))))
  #+end_src

  Add the searcher which uses the fennel.path to compile the fennel lisp into
  lua. There is a performance penalty with this approach but it also means 
  being able to eval forms at runtime to update the config.

  #+begin_src fennel
  (table.insert package.loaders 1 fennel.searcher)
  #+end_src

  Load the core configuration file from ./fnl/config/core.fnl

  #+begin_src fennel
  (local cfg (require :config.core))
  #+end_src

  Export the cfg object. Should prevent it from being garbace collected

  #+begin_src fennel
  cfg
  #+end_src


* Config

* Project Ideas

** DONE A hiccup-inspired statusline framework                        :fixed:
   closed: [2023-02-19 Sun 23:58]
   :properties:
   :header-args: :tangle none
   :end:

   While feline is pretty nice, I would prefer if I could define each component
   as a function and render it like a tree similar to Clojure's hiccup library or JSX

   #+begin_src fennel
   (fn git-branch 
     []
     (with-state 
       [branch (git-branch)]
       [slant-left
        {:fg "#0055cc" :bg "#19192a"}
        [:text icon]
        [:text " "]
        [:text branch]]))

   (fn active-statusline 
     []
     [sections 
      [section 
       [git-branch]]])

   (hiccup-status-line.setup my-statusline)   
   #+end_src

   What makes this concept better than feline?

   - Feline's components concept requires functions for particular parts like
     the hl, enabling it, and the provider (source)
   - Would rather have a function that represents each entry than defining
     parts of each component as functions
   - Want composability

   - Looking through the source at 
     [[https://github.com/feline-nvim/feline.nvim/blob/496975425a28ef1f974e90e9664fe3409738f071/lua/feline/init.lua#L205]] 
     it's really just setting the statusline to a string that call the generate
     function that returns a string. It's autocmds and groups seem to be 
     centered around reloading.
   - Not sure if a hiccup or component system is really needed.
   - Maybe each part could be represented by a function that returns a string
     with some utils around coloring
